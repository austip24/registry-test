{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ol-map",
  "type": "registry:component",
  "title": "OpenLayers Map",
  "description": "Component that makes use of OpenLayers API",
  "dependencies": [
    "zustand",
    "ol"
  ],
  "files": [
    {
      "path": "registry/ol-map/map.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { MapBrowserEvent, Map as OLMap } from \"ol\";\r\nimport \"ol/ol.css\";\r\nimport { create } from \"zustand\";\r\nimport { MapOptions } from \"ol/Map\";\r\nimport BaseLayer from \"ol/layer/Base\";\r\nimport { FeatureLike } from \"ol/Feature\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\n// Zustand store to manage the map state\r\nexport type MapState = {\r\n  map: OLMap | null;\r\n};\r\n\r\nexport type MapActions = {\r\n  setMap: (map: OLMap) => void;\r\n};\r\n\r\nexport type MapStore = MapState & MapActions;\r\n\r\nexport const useMapStore = create<MapStore>((set) => ({\r\n  map: null,\r\n  setMap: (map) => set({ map }),\r\n}));\r\n\r\n// Map component that allows custom properties\r\nexport const Map = ({\r\n  children,\r\n  options,\r\n  ...props\r\n}: {\r\n  children: React.ReactNode;\r\n  options: MapOptions;\r\n} & React.HTMLAttributes<HTMLElement>) => {\r\n  const mapContainerRef = useRef(null);\r\n  const setMap = useMapStore((state) => state.setMap);\r\n\r\n  useEffect(() => {\r\n    if (!mapContainerRef.current) return;\r\n\r\n    const map = new OLMap({\r\n      target: mapContainerRef.current,\r\n      ...options, // Spread custom map properties\r\n    });\r\n\r\n    setMap(map);\r\n\r\n    return () => {\r\n      map.setTarget();\r\n    };\r\n  }, [setMap, options]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapContainerRef}\r\n      className={cn(\"absolute inset-0\", props.className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Map Layer component that adds a layer to the map\r\nexport const MapLayer = ({ layer }: { layer: BaseLayer }) => {\r\n  const map = useMapStore((state) => state.map);\r\n\r\n  useEffect(() => {\r\n    if (!map || !layer) return;\r\n\r\n    map.addLayer(layer);\r\n    return () => {\r\n      map.removeLayer(layer);\r\n    };\r\n  }, [map, layer]);\r\n\r\n  return <></>;\r\n};\r\n\r\n// Map Tooltip component\r\nexport const MapTooltip = ({\r\n  render,\r\n}: {\r\n  render: (feature: FeatureLike) => React.ReactNode;\r\n}) => {\r\n  const map = useMapStore((state) => state.map);\r\n  const [hoveredFeature, setHoveredFeature] = useState<FeatureLike | undefined>(\r\n    undefined\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!map) return;\r\n\r\n    const handlePointerMove = (event: MapBrowserEvent<MouseEvent>) => {\r\n      const feature = map.forEachFeatureAtPixel(event.pixel, (feat) => feat);\r\n      setHoveredFeature(feature);\r\n    };\r\n\r\n    map.on(\"pointermove\", handlePointerMove);\r\n    return () => map.un(\"pointermove\", handlePointerMove);\r\n  }, [map]);\r\n\r\n  if (!hoveredFeature) return null;\r\n\r\n  return (\r\n    <div className=\"absolute z-50 bg-white p-2 shadow-md text-sm border rounded top-2 right-2\">\r\n      {render(hoveredFeature)}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}